// Code generated by MockGen. DO NOT EDIT.
// Source: dependencies.go

// Package process_transaction is a generated GoMock package.
package process_transaction

import (
	context "context"
	reflect "reflect"
	time "time"

	transaction "github.com/bqdanh/money_transfer/internal/entities/transaction"
	gomock "github.com/golang/mock/gomock"
)

// MockdistributeLock is a mock of distributeLock interface.
type MockdistributeLock struct {
	ctrl     *gomock.Controller
	recorder *MockdistributeLockMockRecorder
}

// MockdistributeLockMockRecorder is the mock recorder for MockdistributeLock.
type MockdistributeLockMockRecorder struct {
	mock *MockdistributeLock
}

// NewMockdistributeLock creates a new mock instance.
func NewMockdistributeLock(ctrl *gomock.Controller) *MockdistributeLock {
	mock := &MockdistributeLock{ctrl: ctrl}
	mock.recorder = &MockdistributeLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdistributeLock) EXPECT() *MockdistributeLockMockRecorder {
	return m.recorder
}

// AcquireLockForProcessDepositTransaction mocks base method.
func (m *MockdistributeLock) AcquireLockForProcessDepositTransaction(ctx context.Context, transactionID int64, lockDuration time.Duration) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireLockForProcessDepositTransaction", ctx, transactionID, lockDuration)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLockForProcessDepositTransaction indicates an expected call of AcquireLockForProcessDepositTransaction.
func (mr *MockdistributeLockMockRecorder) AcquireLockForProcessDepositTransaction(ctx, transactionID, lockDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLockForProcessDepositTransaction", reflect.TypeOf((*MockdistributeLock)(nil).AcquireLockForProcessDepositTransaction), ctx, transactionID, lockDuration)
}

// MocktransactionRepository is a mock of transactionRepository interface.
type MocktransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionRepositoryMockRecorder
}

// MocktransactionRepositoryMockRecorder is the mock recorder for MocktransactionRepository.
type MocktransactionRepositoryMockRecorder struct {
	mock *MocktransactionRepository
}

// NewMocktransactionRepository creates a new mock instance.
func NewMocktransactionRepository(ctrl *gomock.Controller) *MocktransactionRepository {
	mock := &MocktransactionRepository{ctrl: ctrl}
	mock.recorder = &MocktransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionRepository) EXPECT() *MocktransactionRepositoryMockRecorder {
	return m.recorder
}

// GetTransactionByID mocks base method.
func (m *MocktransactionRepository) GetTransactionByID(ctx context.Context, transID int64) (transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, transID)
	ret0, _ := ret[0].(transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MocktransactionRepositoryMockRecorder) GetTransactionByID(ctx, transID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MocktransactionRepository)(nil).GetTransactionByID), ctx, transID)
}

// UpdateTransaction mocks base method.
func (m *MocktransactionRepository) UpdateTransaction(ctx context.Context, t transaction.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MocktransactionRepositoryMockRecorder) UpdateTransaction(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MocktransactionRepository)(nil).UpdateTransaction), ctx, t)
}
