// Code generated by MockGen. DO NOT EDIT.
// Source: ./generate_user_token.go

// Package generate_user_token is a generated GoMock package.
package generate_user_token

import (
	reflect "reflect"

	authenticate "github.com/bqdanh/money_transfer/internal/entities/authenticate"
	gomock "github.com/golang/mock/gomock"
)

// MocktokenGenerator is a mock of tokenGenerator interface.
type MocktokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MocktokenGeneratorMockRecorder
}

// MocktokenGeneratorMockRecorder is the mock recorder for MocktokenGenerator.
type MocktokenGeneratorMockRecorder struct {
	mock *MocktokenGenerator
}

// NewMocktokenGenerator creates a new mock instance.
func NewMocktokenGenerator(ctrl *gomock.Controller) *MocktokenGenerator {
	mock := &MocktokenGenerator{ctrl: ctrl}
	mock.recorder = &MocktokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenGenerator) EXPECT() *MocktokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m_2 *MocktokenGenerator) GenerateToken(m authenticate.UserAuthenticateData) (string, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GenerateToken", m)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MocktokenGeneratorMockRecorder) GenerateToken(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MocktokenGenerator)(nil).GenerateToken), m)
}
