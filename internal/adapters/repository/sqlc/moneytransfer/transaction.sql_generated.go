// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transaction.sql

package moneytransfer

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createTransaction = `-- name: CreateTransaction :execresult
INSERT INTO ` + "`" + `transaction` + "`" + ` (` + "`" + `account_id` + "`" + `, ` + "`" + `amount` + "`" + `, ` + "`" + `version` + "`" + `, ` + "`" + `request_id` + "`" + `, ` + "`" + `description` + "`" + `,
                           ` + "`" + `partner_ref_transaction_id` + "`" + `, ` + "`" + `status` + "`" + `, ` + "`" + `type` + "`" + `, ` + "`" + `data` + "`" + `)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTransactionParams struct {
	AccountID               int64           `json:"account_id"`
	Amount                  string          `json:"amount"`
	Version                 int32           `json:"version"`
	RequestID               string          `json:"request_id"`
	Description             string          `json:"description"`
	PartnerRefTransactionID string          `json:"partner_ref_transaction_id"`
	Status                  string          `json:"status"`
	Type                    string          `json:"type"`
	Data                    json.RawMessage `json:"data"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg *CreateTransactionParams) (sql.Result, error) {
	return q.exec(ctx, q.createTransactionStmt, createTransaction,
		arg.AccountID,
		arg.Amount,
		arg.Version,
		arg.RequestID,
		arg.Description,
		arg.PartnerRefTransactionID,
		arg.Status,
		arg.Type,
		arg.Data,
	)
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, account_id, amount, version, request_id, description, partner_ref_transaction_id, status, type, data, created_at, updated_at
FROM ` + "`" + `transaction` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = ?
limit 1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id int64) (*Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionByIDStmt, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Version,
		&i.RequestID,
		&i.Description,
		&i.PartnerRefTransactionID,
		&i.Status,
		&i.Type,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
