// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: account.sql

package moneytransfer

import (
	"context"
	"database/sql"
	"encoding/json"
)

const deleteAccountByUserID = `-- name: DeleteAccountByUserID :execresult
DELETE
FROM account
WHERE user_id = ?
`

func (q *Queries) DeleteAccountByUserID(ctx context.Context, userID int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteAccountByUserIDStmt, deleteAccountByUserID, userID)
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, user_id, account_type, account_data, created_at, updated_at
FROM account
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (*Account, error) {
	row := q.queryRow(ctx, q.getAccountByIDStmt, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountType,
		&i.AccountData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAccountsByUserID = `-- name: GetAccountsByUserID :many
SELECT id, user_id, account_type, account_data, created_at, updated_at
FROM account
WHERE user_id = ?
`

func (q *Queries) GetAccountsByUserID(ctx context.Context, userID int64) ([]*Account, error) {
	rows, err := q.query(ctx, q.getAccountsByUserIDStmt, getAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccountType,
			&i.AccountData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAccount = `-- name: InsertAccount :execresult
INSERT INTO account(user_id, account_type, account_data)
VALUES (?, ?, ?)
`

type InsertAccountParams struct {
	UserID      int64              `json:"user_id"`
	AccountType AccountAccountType `json:"account_type"`
	AccountData json.RawMessage    `json:"account_data"`
}

func (q *Queries) InsertAccount(ctx context.Context, arg *InsertAccountParams) (sql.Result, error) {
	return q.exec(ctx, q.insertAccountStmt, insertAccount, arg.UserID, arg.AccountType, arg.AccountData)
}
