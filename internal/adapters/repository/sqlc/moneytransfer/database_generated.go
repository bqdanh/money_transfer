// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package moneytransfer

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createTransactionEventStmt, err = db.PrepareContext(ctx, createTransactionEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransactionEvent: %w", err)
	}
	if q.deleteAccountByUserIDStmt, err = db.PrepareContext(ctx, deleteAccountByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccountByUserID: %w", err)
	}
	if q.getAccountByIDStmt, err = db.PrepareContext(ctx, getAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountByID: %w", err)
	}
	if q.getAccountsByUserIDStmt, err = db.PrepareContext(ctx, getAccountsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByUserID: %w", err)
	}
	if q.getTransactionByIDStmt, err = db.PrepareContext(ctx, getTransactionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionByID: %w", err)
	}
	if q.getTransactionByRequestIDStmt, err = db.PrepareContext(ctx, getTransactionByRequestID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionByRequestID: %w", err)
	}
	if q.getUserByUserNameStmt, err = db.PrepareContext(ctx, getUserByUserName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUserName: %w", err)
	}
	if q.insertAccountStmt, err = db.PrepareContext(ctx, insertAccount); err != nil {
		return nil, fmt.Errorf("error preparing query InsertAccount: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.updateTransactionStmt, err = db.PrepareContext(ctx, updateTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransaction: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createTransactionEventStmt != nil {
		if cerr := q.createTransactionEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionEventStmt: %w", cerr)
		}
	}
	if q.deleteAccountByUserIDStmt != nil {
		if cerr := q.deleteAccountByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountByUserIDStmt: %w", cerr)
		}
	}
	if q.getAccountByIDStmt != nil {
		if cerr := q.getAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByIDStmt: %w", cerr)
		}
	}
	if q.getAccountsByUserIDStmt != nil {
		if cerr := q.getAccountsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByUserIDStmt: %w", cerr)
		}
	}
	if q.getTransactionByIDStmt != nil {
		if cerr := q.getTransactionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByIDStmt: %w", cerr)
		}
	}
	if q.getTransactionByRequestIDStmt != nil {
		if cerr := q.getTransactionByRequestIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByRequestIDStmt: %w", cerr)
		}
	}
	if q.getUserByUserNameStmt != nil {
		if cerr := q.getUserByUserNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUserNameStmt: %w", cerr)
		}
	}
	if q.insertAccountStmt != nil {
		if cerr := q.insertAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertAccountStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.updateTransactionStmt != nil {
		if cerr := q.updateTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createTransactionStmt         *sql.Stmt
	createTransactionEventStmt    *sql.Stmt
	deleteAccountByUserIDStmt     *sql.Stmt
	getAccountByIDStmt            *sql.Stmt
	getAccountsByUserIDStmt       *sql.Stmt
	getTransactionByIDStmt        *sql.Stmt
	getTransactionByRequestIDStmt *sql.Stmt
	getUserByUserNameStmt         *sql.Stmt
	insertAccountStmt             *sql.Stmt
	insertUserStmt                *sql.Stmt
	updateTransactionStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createTransactionStmt:         q.createTransactionStmt,
		createTransactionEventStmt:    q.createTransactionEventStmt,
		deleteAccountByUserIDStmt:     q.deleteAccountByUserIDStmt,
		getAccountByIDStmt:            q.getAccountByIDStmt,
		getAccountsByUserIDStmt:       q.getAccountsByUserIDStmt,
		getTransactionByIDStmt:        q.getTransactionByIDStmt,
		getTransactionByRequestIDStmt: q.getTransactionByRequestIDStmt,
		getUserByUserNameStmt:         q.getUserByUserNameStmt,
		insertAccountStmt:             q.insertAccountStmt,
		insertUserStmt:                q.insertUserStmt,
		updateTransactionStmt:         q.updateTransactionStmt,
	}
}
