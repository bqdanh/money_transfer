// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package moneytransfer

import (
	"context"
	"database/sql"
)

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT id, user_name, password, full_name, phone, created_at, updated_at
FROM user
WHERE user_name = ?
LIMIT 1
`

func (q *Queries) GetUserByUserName(ctx context.Context, userName string) (*User, error) {
	row := q.queryRow(ctx, q.getUserByUserNameStmt, getUserByUserName, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Password,
		&i.FullName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertUser = `-- name: InsertUser :execresult
INSERT INTO user(user_name,
                 password,
                 full_name,
                 phone)
VALUES (?, ?, ?, ?)
`

type InsertUserParams struct {
	UserName string `json:"user_name"`
	Password string `json:"password"`
	FullName string `json:"full_name"`
	Phone    string `json:"phone"`
}

func (q *Queries) InsertUser(ctx context.Context, arg *InsertUserParams) (sql.Result, error) {
	return q.exec(ctx, q.insertUserStmt, insertUser,
		arg.UserName,
		arg.Password,
		arg.FullName,
		arg.Phone,
	)
}
