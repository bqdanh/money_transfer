// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/service.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LinkBankAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkBankAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkBankAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkBankAccountRequestMultiError, or nil if none found.
func (m *LinkBankAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkBankAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 1 {
		err := LinkBankAccountRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetBankCode()); l < 1 || l > 255 {
		err := LinkBankAccountRequestValidationError{
			field:  "BankCode",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAccountName()); l < 1 || l > 255 {
		err := LinkBankAccountRequestValidationError{
			field:  "AccountName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAccountNumber()); l < 1 || l > 255 {
		err := LinkBankAccountRequestValidationError{
			field:  "AccountNumber",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LinkBankAccountRequestMultiError(errors)
	}

	return nil
}

// LinkBankAccountRequestMultiError is an error wrapping multiple validation
// errors returned by LinkBankAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type LinkBankAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkBankAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkBankAccountRequestMultiError) AllErrors() []error { return m }

// LinkBankAccountRequestValidationError is the validation error returned by
// LinkBankAccountRequest.Validate if the designated constraints aren't met.
type LinkBankAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkBankAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkBankAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkBankAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkBankAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkBankAccountRequestValidationError) ErrorName() string {
	return "LinkBankAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkBankAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkBankAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkBankAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkBankAccountRequestValidationError{}

// Validate checks the field values on LinkBankAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkBankAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkBankAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkBankAccountResponseMultiError, or nil if none found.
func (m *LinkBankAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkBankAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkBankAccountResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkBankAccountResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkBankAccountResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LinkBankAccountResponseMultiError(errors)
	}

	return nil
}

// LinkBankAccountResponseMultiError is an error wrapping multiple validation
// errors returned by LinkBankAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type LinkBankAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkBankAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkBankAccountResponseMultiError) AllErrors() []error { return m }

// LinkBankAccountResponseValidationError is the validation error returned by
// LinkBankAccountResponse.Validate if the designated constraints aren't met.
type LinkBankAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkBankAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkBankAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkBankAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkBankAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkBankAccountResponseValidationError) ErrorName() string {
	return "LinkBankAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkBankAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkBankAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkBankAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkBankAccountResponseValidationError{}

// Validate checks the field values on LinkBankAccountResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkBankAccountResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkBankAccountResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkBankAccountResponse_DataMultiError, or nil if none found.
func (m *LinkBankAccountResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkBankAccountResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return LinkBankAccountResponse_DataMultiError(errors)
	}

	return nil
}

// LinkBankAccountResponse_DataMultiError is an error wrapping multiple
// validation errors returned by LinkBankAccountResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type LinkBankAccountResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkBankAccountResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkBankAccountResponse_DataMultiError) AllErrors() []error { return m }

// LinkBankAccountResponse_DataValidationError is the validation error returned
// by LinkBankAccountResponse_Data.Validate if the designated constraints
// aren't met.
type LinkBankAccountResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkBankAccountResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkBankAccountResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkBankAccountResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkBankAccountResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkBankAccountResponse_DataValidationError) ErrorName() string {
	return "LinkBankAccountResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e LinkBankAccountResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkBankAccountResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkBankAccountResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkBankAccountResponse_DataValidationError{}
