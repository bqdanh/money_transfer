// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: errdetails_custom/bad_request.proto

package errdetails_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BadRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BadRequestMultiError, or
// nil if none found.
func (m *BadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFieldViolations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BadRequestValidationError{
						field:  fmt.Sprintf("FieldViolations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BadRequestValidationError{
						field:  fmt.Sprintf("FieldViolations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BadRequestValidationError{
					field:  fmt.Sprintf("FieldViolations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BadRequestMultiError(errors)
	}

	return nil
}

// BadRequestMultiError is an error wrapping multiple validation errors
// returned by BadRequest.ValidateAll() if the designated constraints aren't met.
type BadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BadRequestMultiError) AllErrors() []error { return m }

// BadRequestValidationError is the validation error returned by
// BadRequest.Validate if the designated constraints aren't met.
type BadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BadRequestValidationError) ErrorName() string { return "BadRequestValidationError" }

// Error satisfies the builtin error interface
func (e BadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BadRequestValidationError{}

// Validate checks the field values on FailPrecondition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FailPrecondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FailPrecondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FailPreconditionMultiError, or nil if none found.
func (m *FailPrecondition) ValidateAll() error {
	return m.validate(true)
}

func (m *FailPrecondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFailureViolations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FailPreconditionValidationError{
						field:  fmt.Sprintf("FailureViolations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FailPreconditionValidationError{
						field:  fmt.Sprintf("FailureViolations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FailPreconditionValidationError{
					field:  fmt.Sprintf("FailureViolations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FailPreconditionMultiError(errors)
	}

	return nil
}

// FailPreconditionMultiError is an error wrapping multiple validation errors
// returned by FailPrecondition.ValidateAll() if the designated constraints
// aren't met.
type FailPreconditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FailPreconditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FailPreconditionMultiError) AllErrors() []error { return m }

// FailPreconditionValidationError is the validation error returned by
// FailPrecondition.Validate if the designated constraints aren't met.
type FailPreconditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailPreconditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailPreconditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailPreconditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailPreconditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailPreconditionValidationError) ErrorName() string { return "FailPreconditionValidationError" }

// Error satisfies the builtin error interface
func (e FailPreconditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailPrecondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailPreconditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailPreconditionValidationError{}

// Validate checks the field values on BadRequest_FieldViolation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BadRequest_FieldViolation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BadRequest_FieldViolation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BadRequest_FieldViolationMultiError, or nil if none found.
func (m *BadRequest_FieldViolation) ValidateAll() error {
	return m.validate(true)
}

func (m *BadRequest_FieldViolation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Description

	// no validation rules for Metadata

	if len(errors) > 0 {
		return BadRequest_FieldViolationMultiError(errors)
	}

	return nil
}

// BadRequest_FieldViolationMultiError is an error wrapping multiple validation
// errors returned by BadRequest_FieldViolation.ValidateAll() if the
// designated constraints aren't met.
type BadRequest_FieldViolationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BadRequest_FieldViolationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BadRequest_FieldViolationMultiError) AllErrors() []error { return m }

// BadRequest_FieldViolationValidationError is the validation error returned by
// BadRequest_FieldViolation.Validate if the designated constraints aren't met.
type BadRequest_FieldViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BadRequest_FieldViolationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BadRequest_FieldViolationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BadRequest_FieldViolationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BadRequest_FieldViolationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BadRequest_FieldViolationValidationError) ErrorName() string {
	return "BadRequest_FieldViolationValidationError"
}

// Error satisfies the builtin error interface
func (e BadRequest_FieldViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBadRequest_FieldViolation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BadRequest_FieldViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BadRequest_FieldViolationValidationError{}

// Validate checks the field values on FailPrecondition_FailureViolation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FailPrecondition_FailureViolation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FailPrecondition_FailureViolation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FailPrecondition_FailureViolationMultiError, or nil if none found.
func (m *FailPrecondition_FailureViolation) ValidateAll() error {
	return m.validate(true)
}

func (m *FailPrecondition_FailureViolation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	// no validation rules for Subject

	// no validation rules for Description

	// no validation rules for Metadata

	if len(errors) > 0 {
		return FailPrecondition_FailureViolationMultiError(errors)
	}

	return nil
}

// FailPrecondition_FailureViolationMultiError is an error wrapping multiple
// validation errors returned by
// FailPrecondition_FailureViolation.ValidateAll() if the designated
// constraints aren't met.
type FailPrecondition_FailureViolationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FailPrecondition_FailureViolationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FailPrecondition_FailureViolationMultiError) AllErrors() []error { return m }

// FailPrecondition_FailureViolationValidationError is the validation error
// returned by FailPrecondition_FailureViolation.Validate if the designated
// constraints aren't met.
type FailPrecondition_FailureViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailPrecondition_FailureViolationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailPrecondition_FailureViolationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailPrecondition_FailureViolationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailPrecondition_FailureViolationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailPrecondition_FailureViolationValidationError) ErrorName() string {
	return "FailPrecondition_FailureViolationValidationError"
}

// Error satisfies the builtin error interface
func (e FailPrecondition_FailureViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailPrecondition_FailureViolation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailPrecondition_FailureViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailPrecondition_FailureViolationValidationError{}
